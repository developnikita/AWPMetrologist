//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.VisualStudio.ServiceReference.Platforms, version 16.0.29814.53
// 
namespace AWPMetrologist.Client.ServiceReference {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MeasuringSystem", Namespace="http://schemas.datacontract.org/2004/07/AWPMetrologist.Common.DataModel")]
    public partial class MeasuringSystem : object, System.ComponentModel.INotifyPropertyChanged {
        
        private float CostField;
        
        private AWPMetrologist.Client.ServiceReference.Exploitation ExploitationField;
        
        private AWPMetrologist.Client.ServiceReference.FactoryManufacturer FactoryManufacturerField;
        
        private int IdField;
        
        private int LifeTimeField;
        
        private AWPMetrologist.Client.ServiceReference.MSCategory MSCategoryField;
        
        private string MSTypeField;
        
        private AWPMetrologist.Client.ServiceReference.Measuring MeasuringField;
        
        private string NameField;
        
        private System.DateTime ProductionDateField;
        
        private string SerialNumberField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Cost {
            get {
                return this.CostField;
            }
            set {
                if ((this.CostField.Equals(value) != true)) {
                    this.CostField = value;
                    this.RaisePropertyChanged("Cost");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AWPMetrologist.Client.ServiceReference.Exploitation Exploitation {
            get {
                return this.ExploitationField;
            }
            set {
                if ((object.ReferenceEquals(this.ExploitationField, value) != true)) {
                    this.ExploitationField = value;
                    this.RaisePropertyChanged("Exploitation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AWPMetrologist.Client.ServiceReference.FactoryManufacturer FactoryManufacturer {
            get {
                return this.FactoryManufacturerField;
            }
            set {
                if ((object.ReferenceEquals(this.FactoryManufacturerField, value) != true)) {
                    this.FactoryManufacturerField = value;
                    this.RaisePropertyChanged("FactoryManufacturer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LifeTime {
            get {
                return this.LifeTimeField;
            }
            set {
                if ((this.LifeTimeField.Equals(value) != true)) {
                    this.LifeTimeField = value;
                    this.RaisePropertyChanged("LifeTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AWPMetrologist.Client.ServiceReference.MSCategory MSCategory {
            get {
                return this.MSCategoryField;
            }
            set {
                if ((object.ReferenceEquals(this.MSCategoryField, value) != true)) {
                    this.MSCategoryField = value;
                    this.RaisePropertyChanged("MSCategory");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MSType {
            get {
                return this.MSTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.MSTypeField, value) != true)) {
                    this.MSTypeField = value;
                    this.RaisePropertyChanged("MSType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AWPMetrologist.Client.ServiceReference.Measuring Measuring {
            get {
                return this.MeasuringField;
            }
            set {
                if ((object.ReferenceEquals(this.MeasuringField, value) != true)) {
                    this.MeasuringField = value;
                    this.RaisePropertyChanged("Measuring");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ProductionDate {
            get {
                return this.ProductionDateField;
            }
            set {
                if ((this.ProductionDateField.Equals(value) != true)) {
                    this.ProductionDateField = value;
                    this.RaisePropertyChanged("ProductionDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SerialNumber {
            get {
                return this.SerialNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.SerialNumberField, value) != true)) {
                    this.SerialNumberField = value;
                    this.RaisePropertyChanged("SerialNumber");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Exploitation", Namespace="http://schemas.datacontract.org/2004/07/AWPMetrologist.Common.DataModel")]
    public partial class Exploitation : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int IdField;
        
        private bool IndicatorField;
        
        private System.DateTime InstallationDateField;
        
        private AWPMetrologist.Client.ServiceReference.InstallationLocation InstallationLocationField;
        
        private System.DateTime InstrumentReplacementDateField;
        
        private string InventoryNumberField;
        
        private bool PrimOrSecField;
        
        private AWPMetrologist.Client.ServiceReference.Repair RepairField;
        
        private System.DateTime SentToStoreField;
        
        private AWPMetrologist.Client.ServiceReference.Storage StorageField;
        
        private AWPMetrologist.Client.ServiceReference.Verification VerificationField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Indicator {
            get {
                return this.IndicatorField;
            }
            set {
                if ((this.IndicatorField.Equals(value) != true)) {
                    this.IndicatorField = value;
                    this.RaisePropertyChanged("Indicator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime InstallationDate {
            get {
                return this.InstallationDateField;
            }
            set {
                if ((this.InstallationDateField.Equals(value) != true)) {
                    this.InstallationDateField = value;
                    this.RaisePropertyChanged("InstallationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AWPMetrologist.Client.ServiceReference.InstallationLocation InstallationLocation {
            get {
                return this.InstallationLocationField;
            }
            set {
                if ((object.ReferenceEquals(this.InstallationLocationField, value) != true)) {
                    this.InstallationLocationField = value;
                    this.RaisePropertyChanged("InstallationLocation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime InstrumentReplacementDate {
            get {
                return this.InstrumentReplacementDateField;
            }
            set {
                if ((this.InstrumentReplacementDateField.Equals(value) != true)) {
                    this.InstrumentReplacementDateField = value;
                    this.RaisePropertyChanged("InstrumentReplacementDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string InventoryNumber {
            get {
                return this.InventoryNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.InventoryNumberField, value) != true)) {
                    this.InventoryNumberField = value;
                    this.RaisePropertyChanged("InventoryNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool PrimOrSec {
            get {
                return this.PrimOrSecField;
            }
            set {
                if ((this.PrimOrSecField.Equals(value) != true)) {
                    this.PrimOrSecField = value;
                    this.RaisePropertyChanged("PrimOrSec");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AWPMetrologist.Client.ServiceReference.Repair Repair {
            get {
                return this.RepairField;
            }
            set {
                if ((object.ReferenceEquals(this.RepairField, value) != true)) {
                    this.RepairField = value;
                    this.RaisePropertyChanged("Repair");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime SentToStore {
            get {
                return this.SentToStoreField;
            }
            set {
                if ((this.SentToStoreField.Equals(value) != true)) {
                    this.SentToStoreField = value;
                    this.RaisePropertyChanged("SentToStore");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AWPMetrologist.Client.ServiceReference.Storage Storage {
            get {
                return this.StorageField;
            }
            set {
                if ((object.ReferenceEquals(this.StorageField, value) != true)) {
                    this.StorageField = value;
                    this.RaisePropertyChanged("Storage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AWPMetrologist.Client.ServiceReference.Verification Verification {
            get {
                return this.VerificationField;
            }
            set {
                if ((object.ReferenceEquals(this.VerificationField, value) != true)) {
                    this.VerificationField = value;
                    this.RaisePropertyChanged("Verification");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FactoryManufacturer", Namespace="http://schemas.datacontract.org/2004/07/AWPMetrologist.Common.DataModel")]
    public partial class FactoryManufacturer : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string FactoryField;
        
        private int IdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Factory {
            get {
                return this.FactoryField;
            }
            set {
                if ((object.ReferenceEquals(this.FactoryField, value) != true)) {
                    this.FactoryField = value;
                    this.RaisePropertyChanged("Factory");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MSCategory", Namespace="http://schemas.datacontract.org/2004/07/AWPMetrologist.Common.DataModel")]
    public partial class MSCategory : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string CategoryField;
        
        private int IdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Category {
            get {
                return this.CategoryField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoryField, value) != true)) {
                    this.CategoryField = value;
                    this.RaisePropertyChanged("Category");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Measuring", Namespace="http://schemas.datacontract.org/2004/07/AWPMetrologist.Common.DataModel")]
    public partial class Measuring : object, System.ComponentModel.INotifyPropertyChanged {
        
        private float AccuracyField;
        
        private float ErrorField;
        
        private int IdField;
        
        private int LowerLimitField;
        
        private AWPMetrologist.Client.ServiceReference.MSKind MSKindField;
        
        private AWPMetrologist.Client.ServiceReference.MeasuredParameter MeasuredParameterField;
        
        private AWPMetrologist.Client.ServiceReference.Unit UnitField;
        
        private int UpperLimitField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Accuracy {
            get {
                return this.AccuracyField;
            }
            set {
                if ((this.AccuracyField.Equals(value) != true)) {
                    this.AccuracyField = value;
                    this.RaisePropertyChanged("Accuracy");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Error {
            get {
                return this.ErrorField;
            }
            set {
                if ((this.ErrorField.Equals(value) != true)) {
                    this.ErrorField = value;
                    this.RaisePropertyChanged("Error");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LowerLimit {
            get {
                return this.LowerLimitField;
            }
            set {
                if ((this.LowerLimitField.Equals(value) != true)) {
                    this.LowerLimitField = value;
                    this.RaisePropertyChanged("LowerLimit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AWPMetrologist.Client.ServiceReference.MSKind MSKind {
            get {
                return this.MSKindField;
            }
            set {
                if ((object.ReferenceEquals(this.MSKindField, value) != true)) {
                    this.MSKindField = value;
                    this.RaisePropertyChanged("MSKind");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AWPMetrologist.Client.ServiceReference.MeasuredParameter MeasuredParameter {
            get {
                return this.MeasuredParameterField;
            }
            set {
                if ((object.ReferenceEquals(this.MeasuredParameterField, value) != true)) {
                    this.MeasuredParameterField = value;
                    this.RaisePropertyChanged("MeasuredParameter");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AWPMetrologist.Client.ServiceReference.Unit Unit {
            get {
                return this.UnitField;
            }
            set {
                if ((object.ReferenceEquals(this.UnitField, value) != true)) {
                    this.UnitField = value;
                    this.RaisePropertyChanged("Unit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UpperLimit {
            get {
                return this.UpperLimitField;
            }
            set {
                if ((this.UpperLimitField.Equals(value) != true)) {
                    this.UpperLimitField = value;
                    this.RaisePropertyChanged("UpperLimit");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InstallationLocation", Namespace="http://schemas.datacontract.org/2004/07/AWPMetrologist.Common.DataModel")]
    public partial class InstallationLocation : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int IdField;
        
        private string LocationField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Location {
            get {
                return this.LocationField;
            }
            set {
                if ((object.ReferenceEquals(this.LocationField, value) != true)) {
                    this.LocationField = value;
                    this.RaisePropertyChanged("Location");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Repair", Namespace="http://schemas.datacontract.org/2004/07/AWPMetrologist.Common.DataModel")]
    public partial class Repair : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int IdField;
        
        private System.DateTime RepairDateField;
        
        private AWPMetrologist.Client.ServiceReference.RepairOrganization RepairOrganizationField;
        
        private AWPMetrologist.Client.ServiceReference.RepairReason RepairReasonField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime RepairDate {
            get {
                return this.RepairDateField;
            }
            set {
                if ((this.RepairDateField.Equals(value) != true)) {
                    this.RepairDateField = value;
                    this.RaisePropertyChanged("RepairDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AWPMetrologist.Client.ServiceReference.RepairOrganization RepairOrganization {
            get {
                return this.RepairOrganizationField;
            }
            set {
                if ((object.ReferenceEquals(this.RepairOrganizationField, value) != true)) {
                    this.RepairOrganizationField = value;
                    this.RaisePropertyChanged("RepairOrganization");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AWPMetrologist.Client.ServiceReference.RepairReason RepairReason {
            get {
                return this.RepairReasonField;
            }
            set {
                if ((object.ReferenceEquals(this.RepairReasonField, value) != true)) {
                    this.RepairReasonField = value;
                    this.RaisePropertyChanged("RepairReason");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Storage", Namespace="http://schemas.datacontract.org/2004/07/AWPMetrologist.Common.DataModel")]
    public partial class Storage : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int IdField;
        
        private string StorageValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StorageValue {
            get {
                return this.StorageValueField;
            }
            set {
                if ((object.ReferenceEquals(this.StorageValueField, value) != true)) {
                    this.StorageValueField = value;
                    this.RaisePropertyChanged("StorageValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Verification", Namespace="http://schemas.datacontract.org/2004/07/AWPMetrologist.Common.DataModel")]
    public partial class Verification : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string CertificateNumberField;
        
        private int IdField;
        
        private System.DateTime LastDateField;
        
        private System.DateTime NextDateField;
        
        private int PeriodField;
        
        private bool ReplacedField;
        
        private AWPMetrologist.Client.ServiceReference.VerificationMethod VerificationMethodField;
        
        private string VerificationPlaceField;
        
        private bool VerificationResultField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CertificateNumber {
            get {
                return this.CertificateNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.CertificateNumberField, value) != true)) {
                    this.CertificateNumberField = value;
                    this.RaisePropertyChanged("CertificateNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastDate {
            get {
                return this.LastDateField;
            }
            set {
                if ((this.LastDateField.Equals(value) != true)) {
                    this.LastDateField = value;
                    this.RaisePropertyChanged("LastDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime NextDate {
            get {
                return this.NextDateField;
            }
            set {
                if ((this.NextDateField.Equals(value) != true)) {
                    this.NextDateField = value;
                    this.RaisePropertyChanged("NextDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Period {
            get {
                return this.PeriodField;
            }
            set {
                if ((this.PeriodField.Equals(value) != true)) {
                    this.PeriodField = value;
                    this.RaisePropertyChanged("Period");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Replaced {
            get {
                return this.ReplacedField;
            }
            set {
                if ((this.ReplacedField.Equals(value) != true)) {
                    this.ReplacedField = value;
                    this.RaisePropertyChanged("Replaced");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AWPMetrologist.Client.ServiceReference.VerificationMethod VerificationMethod {
            get {
                return this.VerificationMethodField;
            }
            set {
                if ((object.ReferenceEquals(this.VerificationMethodField, value) != true)) {
                    this.VerificationMethodField = value;
                    this.RaisePropertyChanged("VerificationMethod");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VerificationPlace {
            get {
                return this.VerificationPlaceField;
            }
            set {
                if ((object.ReferenceEquals(this.VerificationPlaceField, value) != true)) {
                    this.VerificationPlaceField = value;
                    this.RaisePropertyChanged("VerificationPlace");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool VerificationResult {
            get {
                return this.VerificationResultField;
            }
            set {
                if ((this.VerificationResultField.Equals(value) != true)) {
                    this.VerificationResultField = value;
                    this.RaisePropertyChanged("VerificationResult");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RepairOrganization", Namespace="http://schemas.datacontract.org/2004/07/AWPMetrologist.Common.DataModel")]
    public partial class RepairOrganization : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int IdField;
        
        private string OrganizationField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Organization {
            get {
                return this.OrganizationField;
            }
            set {
                if ((object.ReferenceEquals(this.OrganizationField, value) != true)) {
                    this.OrganizationField = value;
                    this.RaisePropertyChanged("Organization");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RepairReason", Namespace="http://schemas.datacontract.org/2004/07/AWPMetrologist.Common.DataModel")]
    public partial class RepairReason : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int IdField;
        
        private string ReasonField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Reason {
            get {
                return this.ReasonField;
            }
            set {
                if ((object.ReferenceEquals(this.ReasonField, value) != true)) {
                    this.ReasonField = value;
                    this.RaisePropertyChanged("Reason");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VerificationMethod", Namespace="http://schemas.datacontract.org/2004/07/AWPMetrologist.Common.DataModel")]
    public partial class VerificationMethod : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int IdField;
        
        private string MethodField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Method {
            get {
                return this.MethodField;
            }
            set {
                if ((object.ReferenceEquals(this.MethodField, value) != true)) {
                    this.MethodField = value;
                    this.RaisePropertyChanged("Method");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MSKind", Namespace="http://schemas.datacontract.org/2004/07/AWPMetrologist.Common.DataModel")]
    public partial class MSKind : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int IdField;
        
        private string KindField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Kind {
            get {
                return this.KindField;
            }
            set {
                if ((object.ReferenceEquals(this.KindField, value) != true)) {
                    this.KindField = value;
                    this.RaisePropertyChanged("Kind");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MeasuredParameter", Namespace="http://schemas.datacontract.org/2004/07/AWPMetrologist.Common.DataModel")]
    public partial class MeasuredParameter : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int IdField;
        
        private string ParameterField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Parameter {
            get {
                return this.ParameterField;
            }
            set {
                if ((object.ReferenceEquals(this.ParameterField, value) != true)) {
                    this.ParameterField = value;
                    this.RaisePropertyChanged("Parameter");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Unit", Namespace="http://schemas.datacontract.org/2004/07/AWPMetrologist.Common.DataModel")]
    public partial class Unit : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int IdField;
        
        private string UnitValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UnitValue {
            get {
                return this.UnitValueField;
            }
            set {
                if ((object.ReferenceEquals(this.UnitValueField, value) != true)) {
                    this.UnitValueField = value;
                    this.RaisePropertyChanged("UnitValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TechnicalCondition", Namespace="http://schemas.datacontract.org/2004/07/AWPMetrologist.Common.DataModel")]
    public partial class TechnicalCondition : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string ConditionField;
        
        private int IdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Condition {
            get {
                return this.ConditionField;
            }
            set {
                if ((object.ReferenceEquals(this.ConditionField, value) != true)) {
                    this.ConditionField = value;
                    this.RaisePropertyChanged("Condition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DeviceStatus", Namespace="http://schemas.datacontract.org/2004/07/AWPMetrologist.Common.DataModel")]
    public partial class DeviceStatus : object, System.ComponentModel.INotifyPropertyChanged {
        
        private AWPMetrologist.Client.ServiceReference.TechnicalCondition ConditionField;
        
        private System.DateTime FromTimeField;
        
        private int IdField;
        
        private AWPMetrologist.Client.ServiceReference.MeasuringSystem MSField;
        
        private System.DateTime ToTimeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AWPMetrologist.Client.ServiceReference.TechnicalCondition Condition {
            get {
                return this.ConditionField;
            }
            set {
                if ((object.ReferenceEquals(this.ConditionField, value) != true)) {
                    this.ConditionField = value;
                    this.RaisePropertyChanged("Condition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime FromTime {
            get {
                return this.FromTimeField;
            }
            set {
                if ((this.FromTimeField.Equals(value) != true)) {
                    this.FromTimeField = value;
                    this.RaisePropertyChanged("FromTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AWPMetrologist.Client.ServiceReference.MeasuringSystem MS {
            get {
                return this.MSField;
            }
            set {
                if ((object.ReferenceEquals(this.MSField, value) != true)) {
                    this.MSField = value;
                    this.RaisePropertyChanged("MS");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ToTime {
            get {
                return this.ToTimeField;
            }
            set {
                if ((this.ToTimeField.Equals(value) != true)) {
                    this.ToTimeField = value;
                    this.RaisePropertyChanged("ToTime");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetMeasuringSystemsJson", ReplyAction="http://tempuri.org/IService/GetMeasuringSystemsJsonResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AWPMetrologist.Client.ServiceReference.MeasuringSystem>> GetMeasuringSystemsJsonAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetExploitationsJson", ReplyAction="http://tempuri.org/IService/GetExploitationsJsonResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AWPMetrologist.Client.ServiceReference.Exploitation>> GetExploitationsJsonAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetFactoryManufacturersJson", ReplyAction="http://tempuri.org/IService/GetFactoryManufacturersJsonResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AWPMetrologist.Client.ServiceReference.FactoryManufacturer>> GetFactoryManufacturersJsonAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetInstallationLocationsJson", ReplyAction="http://tempuri.org/IService/GetInstallationLocationsJsonResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AWPMetrologist.Client.ServiceReference.InstallationLocation>> GetInstallationLocationsJsonAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetMeasuredParametersJson", ReplyAction="http://tempuri.org/IService/GetMeasuredParametersJsonResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AWPMetrologist.Client.ServiceReference.MeasuredParameter>> GetMeasuredParametersJsonAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetMeasuringsJson", ReplyAction="http://tempuri.org/IService/GetMeasuringsJsonResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AWPMetrologist.Client.ServiceReference.Measuring>> GetMeasuringsJsonAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetMSCategoriesJson", ReplyAction="http://tempuri.org/IService/GetMSCategoriesJsonResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AWPMetrologist.Client.ServiceReference.MSCategory>> GetMSCategoriesJsonAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetMSKindsJson", ReplyAction="http://tempuri.org/IService/GetMSKindsJsonResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AWPMetrologist.Client.ServiceReference.MSKind>> GetMSKindsJsonAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetRepairsJson", ReplyAction="http://tempuri.org/IService/GetRepairsJsonResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AWPMetrologist.Client.ServiceReference.Repair>> GetRepairsJsonAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetRepairOrganizationsJson", ReplyAction="http://tempuri.org/IService/GetRepairOrganizationsJsonResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AWPMetrologist.Client.ServiceReference.RepairOrganization>> GetRepairOrganizationsJsonAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetRepairReasonsJson", ReplyAction="http://tempuri.org/IService/GetRepairReasonsJsonResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AWPMetrologist.Client.ServiceReference.RepairReason>> GetRepairReasonsJsonAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetStoragesJson", ReplyAction="http://tempuri.org/IService/GetStoragesJsonResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AWPMetrologist.Client.ServiceReference.Storage>> GetStoragesJsonAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetTechnicalConditionsJson", ReplyAction="http://tempuri.org/IService/GetTechnicalConditionsJsonResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AWPMetrologist.Client.ServiceReference.TechnicalCondition>> GetTechnicalConditionsJsonAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetUnitsJson", ReplyAction="http://tempuri.org/IService/GetUnitsJsonResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AWPMetrologist.Client.ServiceReference.Unit>> GetUnitsJsonAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetVerificationsJson", ReplyAction="http://tempuri.org/IService/GetVerificationsJsonResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AWPMetrologist.Client.ServiceReference.Verification>> GetVerificationsJsonAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetVerificationMethodsJson", ReplyAction="http://tempuri.org/IService/GetVerificationMethodsJsonResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AWPMetrologist.Client.ServiceReference.VerificationMethod>> GetVerificationMethodsJsonAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetDeviceStatusesJson", ReplyAction="http://tempuri.org/IService/GetDeviceStatusesJsonResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AWPMetrologist.Client.ServiceReference.DeviceStatus>> GetDeviceStatusesJsonAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetHandbookMeasuringSystemDataJson", ReplyAction="http://tempuri.org/IService/GetHandbookMeasuringSystemDataJsonResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AWPMetrologist.Client.ServiceReference.MeasuringSystem>> GetHandbookMeasuringSystemDataJsonAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetMeasuringSystemsVerificationJson", ReplyAction="http://tempuri.org/IService/GetMeasuringSystemsVerificationJsonResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AWPMetrologist.Client.ServiceReference.MeasuringSystem>> GetMeasuringSystemsVerificationJsonAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddMSCategory", ReplyAction="http://tempuri.org/IService/AddMSCategoryResponse")]
        System.Threading.Tasks.Task<bool> AddMSCategoryAsync(AWPMetrologist.Client.ServiceReference.MSCategory category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddFactoryManufacturer", ReplyAction="http://tempuri.org/IService/AddFactoryManufacturerResponse")]
        System.Threading.Tasks.Task<bool> AddFactoryManufacturerAsync(AWPMetrologist.Client.ServiceReference.FactoryManufacturer factory);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddInstallationLocation", ReplyAction="http://tempuri.org/IService/AddInstallationLocationResponse")]
        System.Threading.Tasks.Task<bool> AddInstallationLocationAsync(AWPMetrologist.Client.ServiceReference.InstallationLocation location);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddMeasuredParameter", ReplyAction="http://tempuri.org/IService/AddMeasuredParameterResponse")]
        System.Threading.Tasks.Task<bool> AddMeasuredParameterAsync(AWPMetrologist.Client.ServiceReference.MeasuredParameter parameter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddMSKind", ReplyAction="http://tempuri.org/IService/AddMSKindResponse")]
        System.Threading.Tasks.Task<bool> AddMSKindAsync(AWPMetrologist.Client.ServiceReference.MSKind kind);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddRepairOrganization", ReplyAction="http://tempuri.org/IService/AddRepairOrganizationResponse")]
        System.Threading.Tasks.Task<bool> AddRepairOrganizationAsync(AWPMetrologist.Client.ServiceReference.RepairOrganization organization);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddRepairReason", ReplyAction="http://tempuri.org/IService/AddRepairReasonResponse")]
        System.Threading.Tasks.Task<bool> AddRepairReasonAsync(AWPMetrologist.Client.ServiceReference.RepairReason reason);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddStorage", ReplyAction="http://tempuri.org/IService/AddStorageResponse")]
        System.Threading.Tasks.Task<bool> AddStorageAsync(AWPMetrologist.Client.ServiceReference.Storage storage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddTechnicalCondition", ReplyAction="http://tempuri.org/IService/AddTechnicalConditionResponse")]
        System.Threading.Tasks.Task<bool> AddTechnicalConditionAsync(AWPMetrologist.Client.ServiceReference.TechnicalCondition condition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddUnit", ReplyAction="http://tempuri.org/IService/AddUnitResponse")]
        System.Threading.Tasks.Task<bool> AddUnitAsync(AWPMetrologist.Client.ServiceReference.Unit unit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddVerificationMethod", ReplyAction="http://tempuri.org/IService/AddVerificationMethodResponse")]
        System.Threading.Tasks.Task<bool> AddVerificationMethodAsync(AWPMetrologist.Client.ServiceReference.VerificationMethod method);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddMeasuringSystem", ReplyAction="http://tempuri.org/IService/AddMeasuringSystemResponse")]
        System.Threading.Tasks.Task<bool> AddMeasuringSystemAsync(AWPMetrologist.Client.ServiceReference.MeasuringSystem system);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddExploitation", ReplyAction="http://tempuri.org/IService/AddExploitationResponse")]
        System.Threading.Tasks.Task<int> AddExploitationAsync(AWPMetrologist.Client.ServiceReference.Exploitation exploitation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddMeasuring", ReplyAction="http://tempuri.org/IService/AddMeasuringResponse")]
        System.Threading.Tasks.Task<int> AddMeasuringAsync(AWPMetrologist.Client.ServiceReference.Measuring measuring);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddVerification", ReplyAction="http://tempuri.org/IService/AddVerificationResponse")]
        System.Threading.Tasks.Task<int> AddVerificationAsync(AWPMetrologist.Client.ServiceReference.Verification verification);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddRepair", ReplyAction="http://tempuri.org/IService/AddRepairResponse")]
        System.Threading.Tasks.Task<bool> AddRepairAsync(AWPMetrologist.Client.ServiceReference.Repair repair);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteMSCategory", ReplyAction="http://tempuri.org/IService/DeleteMSCategoryResponse")]
        System.Threading.Tasks.Task<bool> DeleteMSCategoryAsync(AWPMetrologist.Client.ServiceReference.MSCategory category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteFactoryManufacturer", ReplyAction="http://tempuri.org/IService/DeleteFactoryManufacturerResponse")]
        System.Threading.Tasks.Task<bool> DeleteFactoryManufacturerAsync(AWPMetrologist.Client.ServiceReference.FactoryManufacturer factory);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteInstallationLocation", ReplyAction="http://tempuri.org/IService/DeleteInstallationLocationResponse")]
        System.Threading.Tasks.Task<bool> DeleteInstallationLocationAsync(AWPMetrologist.Client.ServiceReference.InstallationLocation location);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteMeasuredParameter", ReplyAction="http://tempuri.org/IService/DeleteMeasuredParameterResponse")]
        System.Threading.Tasks.Task<bool> DeleteMeasuredParameterAsync(AWPMetrologist.Client.ServiceReference.MeasuredParameter parameter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteMSKind", ReplyAction="http://tempuri.org/IService/DeleteMSKindResponse")]
        System.Threading.Tasks.Task<bool> DeleteMSKindAsync(AWPMetrologist.Client.ServiceReference.MSKind kind);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteRepairOrganization", ReplyAction="http://tempuri.org/IService/DeleteRepairOrganizationResponse")]
        System.Threading.Tasks.Task<bool> DeleteRepairOrganizationAsync(AWPMetrologist.Client.ServiceReference.RepairOrganization organization);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteRepairReason", ReplyAction="http://tempuri.org/IService/DeleteRepairReasonResponse")]
        System.Threading.Tasks.Task<bool> DeleteRepairReasonAsync(AWPMetrologist.Client.ServiceReference.RepairReason reason);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteStorage", ReplyAction="http://tempuri.org/IService/DeleteStorageResponse")]
        System.Threading.Tasks.Task<bool> DeleteStorageAsync(AWPMetrologist.Client.ServiceReference.Storage storage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteTechnicalCondition", ReplyAction="http://tempuri.org/IService/DeleteTechnicalConditionResponse")]
        System.Threading.Tasks.Task<bool> DeleteTechnicalConditionAsync(AWPMetrologist.Client.ServiceReference.TechnicalCondition condition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteUnit", ReplyAction="http://tempuri.org/IService/DeleteUnitResponse")]
        System.Threading.Tasks.Task<bool> DeleteUnitAsync(AWPMetrologist.Client.ServiceReference.Unit unit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteVerificationMethod", ReplyAction="http://tempuri.org/IService/DeleteVerificationMethodResponse")]
        System.Threading.Tasks.Task<bool> DeleteVerificationMethodAsync(AWPMetrologist.Client.ServiceReference.VerificationMethod method);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateExploitation", ReplyAction="http://tempuri.org/IService/UpdateExploitationResponse")]
        System.Threading.Tasks.Task<bool> UpdateExploitationAsync(AWPMetrologist.Client.ServiceReference.Exploitation exploitation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateVerification", ReplyAction="http://tempuri.org/IService/UpdateVerificationResponse")]
        System.Threading.Tasks.Task<bool> UpdateVerificationAsync(AWPMetrologist.Client.ServiceReference.Verification verification);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : AWPMetrologist.Client.ServiceReference.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<AWPMetrologist.Client.ServiceReference.IService>, AWPMetrologist.Client.ServiceReference.IService {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public ServiceClient() : 
                base(ServiceClient.GetDefaultBinding(), ServiceClient.GetDefaultEndpointAddress()) {
            this.Endpoint.Name = EndpointConfiguration.RESTEndPoint.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(ServiceClient.GetBindingForEndpoint(endpointConfiguration), ServiceClient.GetEndpointAddress(endpointConfiguration)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(ServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(ServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AWPMetrologist.Client.ServiceReference.MeasuringSystem>> GetMeasuringSystemsJsonAsync() {
            return base.Channel.GetMeasuringSystemsJsonAsync();
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AWPMetrologist.Client.ServiceReference.Exploitation>> GetExploitationsJsonAsync() {
            return base.Channel.GetExploitationsJsonAsync();
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AWPMetrologist.Client.ServiceReference.FactoryManufacturer>> GetFactoryManufacturersJsonAsync() {
            return base.Channel.GetFactoryManufacturersJsonAsync();
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AWPMetrologist.Client.ServiceReference.InstallationLocation>> GetInstallationLocationsJsonAsync() {
            return base.Channel.GetInstallationLocationsJsonAsync();
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AWPMetrologist.Client.ServiceReference.MeasuredParameter>> GetMeasuredParametersJsonAsync() {
            return base.Channel.GetMeasuredParametersJsonAsync();
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AWPMetrologist.Client.ServiceReference.Measuring>> GetMeasuringsJsonAsync() {
            return base.Channel.GetMeasuringsJsonAsync();
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AWPMetrologist.Client.ServiceReference.MSCategory>> GetMSCategoriesJsonAsync() {
            return base.Channel.GetMSCategoriesJsonAsync();
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AWPMetrologist.Client.ServiceReference.MSKind>> GetMSKindsJsonAsync() {
            return base.Channel.GetMSKindsJsonAsync();
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AWPMetrologist.Client.ServiceReference.Repair>> GetRepairsJsonAsync() {
            return base.Channel.GetRepairsJsonAsync();
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AWPMetrologist.Client.ServiceReference.RepairOrganization>> GetRepairOrganizationsJsonAsync() {
            return base.Channel.GetRepairOrganizationsJsonAsync();
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AWPMetrologist.Client.ServiceReference.RepairReason>> GetRepairReasonsJsonAsync() {
            return base.Channel.GetRepairReasonsJsonAsync();
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AWPMetrologist.Client.ServiceReference.Storage>> GetStoragesJsonAsync() {
            return base.Channel.GetStoragesJsonAsync();
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AWPMetrologist.Client.ServiceReference.TechnicalCondition>> GetTechnicalConditionsJsonAsync() {
            return base.Channel.GetTechnicalConditionsJsonAsync();
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AWPMetrologist.Client.ServiceReference.Unit>> GetUnitsJsonAsync() {
            return base.Channel.GetUnitsJsonAsync();
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AWPMetrologist.Client.ServiceReference.Verification>> GetVerificationsJsonAsync() {
            return base.Channel.GetVerificationsJsonAsync();
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AWPMetrologist.Client.ServiceReference.VerificationMethod>> GetVerificationMethodsJsonAsync() {
            return base.Channel.GetVerificationMethodsJsonAsync();
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AWPMetrologist.Client.ServiceReference.DeviceStatus>> GetDeviceStatusesJsonAsync() {
            return base.Channel.GetDeviceStatusesJsonAsync();
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AWPMetrologist.Client.ServiceReference.MeasuringSystem>> GetHandbookMeasuringSystemDataJsonAsync() {
            return base.Channel.GetHandbookMeasuringSystemDataJsonAsync();
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AWPMetrologist.Client.ServiceReference.MeasuringSystem>> GetMeasuringSystemsVerificationJsonAsync() {
            return base.Channel.GetMeasuringSystemsVerificationJsonAsync();
        }
        
        public System.Threading.Tasks.Task<bool> AddMSCategoryAsync(AWPMetrologist.Client.ServiceReference.MSCategory category) {
            return base.Channel.AddMSCategoryAsync(category);
        }
        
        public System.Threading.Tasks.Task<bool> AddFactoryManufacturerAsync(AWPMetrologist.Client.ServiceReference.FactoryManufacturer factory) {
            return base.Channel.AddFactoryManufacturerAsync(factory);
        }
        
        public System.Threading.Tasks.Task<bool> AddInstallationLocationAsync(AWPMetrologist.Client.ServiceReference.InstallationLocation location) {
            return base.Channel.AddInstallationLocationAsync(location);
        }
        
        public System.Threading.Tasks.Task<bool> AddMeasuredParameterAsync(AWPMetrologist.Client.ServiceReference.MeasuredParameter parameter) {
            return base.Channel.AddMeasuredParameterAsync(parameter);
        }
        
        public System.Threading.Tasks.Task<bool> AddMSKindAsync(AWPMetrologist.Client.ServiceReference.MSKind kind) {
            return base.Channel.AddMSKindAsync(kind);
        }
        
        public System.Threading.Tasks.Task<bool> AddRepairOrganizationAsync(AWPMetrologist.Client.ServiceReference.RepairOrganization organization) {
            return base.Channel.AddRepairOrganizationAsync(organization);
        }
        
        public System.Threading.Tasks.Task<bool> AddRepairReasonAsync(AWPMetrologist.Client.ServiceReference.RepairReason reason) {
            return base.Channel.AddRepairReasonAsync(reason);
        }
        
        public System.Threading.Tasks.Task<bool> AddStorageAsync(AWPMetrologist.Client.ServiceReference.Storage storage) {
            return base.Channel.AddStorageAsync(storage);
        }
        
        public System.Threading.Tasks.Task<bool> AddTechnicalConditionAsync(AWPMetrologist.Client.ServiceReference.TechnicalCondition condition) {
            return base.Channel.AddTechnicalConditionAsync(condition);
        }
        
        public System.Threading.Tasks.Task<bool> AddUnitAsync(AWPMetrologist.Client.ServiceReference.Unit unit) {
            return base.Channel.AddUnitAsync(unit);
        }
        
        public System.Threading.Tasks.Task<bool> AddVerificationMethodAsync(AWPMetrologist.Client.ServiceReference.VerificationMethod method) {
            return base.Channel.AddVerificationMethodAsync(method);
        }
        
        public System.Threading.Tasks.Task<bool> AddMeasuringSystemAsync(AWPMetrologist.Client.ServiceReference.MeasuringSystem system) {
            return base.Channel.AddMeasuringSystemAsync(system);
        }
        
        public System.Threading.Tasks.Task<int> AddExploitationAsync(AWPMetrologist.Client.ServiceReference.Exploitation exploitation) {
            return base.Channel.AddExploitationAsync(exploitation);
        }
        
        public System.Threading.Tasks.Task<int> AddMeasuringAsync(AWPMetrologist.Client.ServiceReference.Measuring measuring) {
            return base.Channel.AddMeasuringAsync(measuring);
        }
        
        public System.Threading.Tasks.Task<int> AddVerificationAsync(AWPMetrologist.Client.ServiceReference.Verification verification) {
            return base.Channel.AddVerificationAsync(verification);
        }
        
        public System.Threading.Tasks.Task<bool> AddRepairAsync(AWPMetrologist.Client.ServiceReference.Repair repair) {
            return base.Channel.AddRepairAsync(repair);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteMSCategoryAsync(AWPMetrologist.Client.ServiceReference.MSCategory category) {
            return base.Channel.DeleteMSCategoryAsync(category);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteFactoryManufacturerAsync(AWPMetrologist.Client.ServiceReference.FactoryManufacturer factory) {
            return base.Channel.DeleteFactoryManufacturerAsync(factory);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteInstallationLocationAsync(AWPMetrologist.Client.ServiceReference.InstallationLocation location) {
            return base.Channel.DeleteInstallationLocationAsync(location);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteMeasuredParameterAsync(AWPMetrologist.Client.ServiceReference.MeasuredParameter parameter) {
            return base.Channel.DeleteMeasuredParameterAsync(parameter);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteMSKindAsync(AWPMetrologist.Client.ServiceReference.MSKind kind) {
            return base.Channel.DeleteMSKindAsync(kind);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteRepairOrganizationAsync(AWPMetrologist.Client.ServiceReference.RepairOrganization organization) {
            return base.Channel.DeleteRepairOrganizationAsync(organization);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteRepairReasonAsync(AWPMetrologist.Client.ServiceReference.RepairReason reason) {
            return base.Channel.DeleteRepairReasonAsync(reason);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteStorageAsync(AWPMetrologist.Client.ServiceReference.Storage storage) {
            return base.Channel.DeleteStorageAsync(storage);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteTechnicalConditionAsync(AWPMetrologist.Client.ServiceReference.TechnicalCondition condition) {
            return base.Channel.DeleteTechnicalConditionAsync(condition);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteUnitAsync(AWPMetrologist.Client.ServiceReference.Unit unit) {
            return base.Channel.DeleteUnitAsync(unit);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteVerificationMethodAsync(AWPMetrologist.Client.ServiceReference.VerificationMethod method) {
            return base.Channel.DeleteVerificationMethodAsync(method);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateExploitationAsync(AWPMetrologist.Client.ServiceReference.Exploitation exploitation) {
            return base.Channel.UpdateExploitationAsync(exploitation);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateVerificationAsync(AWPMetrologist.Client.ServiceReference.Verification verification) {
            return base.Channel.UpdateVerificationAsync(verification);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.RESTEndPoint)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.RESTEndPoint)) {
                return new System.ServiceModel.EndpointAddress("http://localhost:64455/Service.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return ServiceClient.GetBindingForEndpoint(EndpointConfiguration.RESTEndPoint);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return ServiceClient.GetEndpointAddress(EndpointConfiguration.RESTEndPoint);
        }
        
        public enum EndpointConfiguration {
            
            RESTEndPoint,
        }
    }
}
